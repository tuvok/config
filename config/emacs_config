; -*-Lisp-*-

(require 'package)
(package-initialize)

(global-font-lock-mode t)
(setq c-default-style "ellemtel")
(setq scroll-step 1)
(setq-default indent-tabs-mode nil)
(set-input-mode (car (current-input-mode)) (nth 1 (current-input-mode)) 0)
;(global-set-key "\C-x\C-a" 'speedbar-get-focus)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;Turn off menu-bar
(menu-bar-mode -1)

;Key bindings help
(require 'which-key)
(which-key-mode)

;Git integration
(require 'magit)
(global-set-key (kbd "C-x g s") 'magit-status)

;----------------------------------------------
;Indentation and newline after RET
(defun custom-indent ()
  "Customized indentation with newline"
  (interactive)
  (indent-according-to-mode)
  (newline-and-indent))
(global-set-key (kbd "RET") 'custom-indent)

;----------------------------------------------
;one line scrolling keys (without moving pointer):
(defun scroll-one-up ()
"Scrolls screen one line up"
(interactive)
(scroll-up 1))

(defun scroll-one-down ()
"Scrolls screen one line up"
(interactive)
(scroll-down 1))

(global-set-key (kbd "M-n") 'scroll-one-up)
(global-set-key (kbd "M-p") 'scroll-one-down)

;----------------------------------------------
;Window switching with C-j and C-J

(defun other-window-backward (&optional n)
"Select Nth previous window."
(interactive "P")
(other-window (- (prefix-numeric-value n))))

(defun other-window-forward (&optional n)
"Select Nth next window."
(interactive "P")
(other-window (prefix-numeric-value n)))
;----------------------------------------------

;enable when better key bindings found
;(global-set-key (kbd "C-j") 'other-window-backward)
;(global-set-key (kbd "C-J") 'other-window-forward)

;Code completion:
;(global-ede-mode 1)
;(semantic-mode)
;(global-semantic-idle-completions-mode)
;(global-semantic-idle-summary-mode)
;(semantic-load-enable-gaudy-code-helpers)

;(global-set-key (kbd "C-c >") 'semantic-complete-analyze-inline-idle)
;(global-set-key (kbd "M-e") 'semantic-ia-fast-jump)

;(setq-mode-local c-mode
;		 semantic-find-default-throttle
;		 '(local project unloaded recursive))

;Org-mode configurations:
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-switchb)

;----------------------------------------------
;RTAGS
(load "rtags/rtags")
(use-package rtags
  :config
  (progn
    (unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
    (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))

    (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
    (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
    (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
    (define-key c-mode-base-map (kbd "s-B") 'rtags-location-stack-back)
    (define-key c-mode-base-map (kbd "s-F") 'rtags-location-stack-forward)
    (define-key c-mode-base-map (kbd "C-D") 'rtags-diagnostics)
    (define-key c-mode-base-map (kbd "C-o") 'other-window)

    (rtags-enable-standard-keybindings)

    (setq rtags-autostart-diagnostics t)
;    (setq rtags-use-helm t)

    ;; Start rdm when entering c/c++ modes
    ;(add-hook 'c-mode-hook 'rtags-start-process-unless-running)
    ;(add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
    ;; Shutdown rdm when leaving emacs.
    ;(add-hook 'kill-emacs-hook 'rtags-quit-rdm)
    ))

;; Live code checking.
(load "rtags/flycheck-rtags")
(use-package flycheck-rtags
  :config
  (progn
    ;; ensure that we use only rtags checking
    ;; https://github.com/Andersbakken/rtags#optional-1
    (defun setup-flycheck-rtags ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
      (setq-local flycheck-check-syntax-automatically nil)
      (rtags-set-periodic-reparse-timeout 2.0)  ;; Run flycheck 2 seconds after being idle.
      )
    (add-hook 'c-mode-hook #'setup-flycheck-rtags)
    (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
    ))

;; Code autocompletion
;; Use rtags for auto-completion.
(require 'company)
(global-company-mode)
(load "rtags/company-rtags")
;(define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
(define-key c-mode-base-map (kbd "M-/") 'company-complete)
(use-package company-rtags
  :config
  (progn
    (setq rtags-completions-enabled t)
    (push 'company-rtags company-backends)
    ))


;; Other C/C++ configs
(defun my-c-mode-hook ()
  (global-linum-mode t)
  (setq linum-format "%4d \u2502 ")
  (setq c-basic-offset 4)
  (column-number-mode t)
  )

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'c++-mode-hook 'my-c-mode-hook)
